#set syntax = strict;
require "../../../core/libs/interfaceLibrary.mnd";

param structureId = "floodBarrier";
param blockX = null;
param blockY = null;
param radius = null;

noinit baseBlock, tickEffect;

var playerTeam = @sharded;
var buffer = 1.5;
var bootClient = 1;

var id = getId(out id);
var idShield = id;
var idGlow1 = id + 1;
var idGlow2 = id + 2;
var idGlow3 = id + 3;
var idGlow4 = id + 4;
var idText1 = id + 6;
var idText2 = id + 7;
var idText3 = id + 8;
var idText4 = id + 9;
var idWave = id + 10;
var idText5 = id + 11;

begin

    print(structureId);

    setrate(1000);
    setmarker(:remove, idShield);
    setmarker(:remove, idGlow1);
    setmarker(:remove, idGlow2);
    setmarker(:remove, idGlow3);
    setmarker(:remove, idGlow4);
    setmarker(:remove, idText1);
    setmarker(:remove, idText2);
    setmarker(:remove, idText3);
    setmarker(:remove, idText4);
    setmarker(:remove, idWave);
    setmarker(:remove, idText5);

    baseBlock = getblock(:building, blockX, blockY);

    if @server then do
        server();
        client();
    while true; end;

    if @client then do
        client();
    while true; end;

end;

void client()

    if bootClient then
        bootClient = 0;

        makemarker(:shape, idShield, 0, 0, false);
        setmarker(:shape, idShield, 100, 1, 1);
        setmarker(:stroke, idShield, 12);
        setmarker(:drawLayer, idShield, 125);
        setmarker(:color, idShield, %6c87fd);
        setmarker(:radius, idShield, radius * 8 + 12);
        setmarker(:pos, idShield, blockX, blockY);

        makemarker(:shape, idGlow1, 0, 0, false);
        setmarker(:shape, idGlow1, 100, 0, 1);
        setmarker(:drawLayer, idGlow1, 100);
        setmarker(:pos, idGlow1, blockX, blockY);
        setmarker(:color, idGlow1, %6c87fd);
        setmarker(:arc, idGlow1, 75 / radius , 90 - 75 / radius);
        setmarker(:radius, idGlow1, radius * 8);

        makemarker(:shape, idGlow2, 0, 0, false);
        setmarker(:shape, idGlow2, 100, 0, 1);
        setmarker(:drawLayer, idGlow2, 100);
        setmarker(:pos, idGlow2, blockX, blockY);
        setmarker(:color, idGlow2, %6c87fd);
        setmarker(:arc, idGlow2, 90 + 75 / radius, 180 - 75 / radius);
        setmarker(:radius, idGlow2, radius * 8);

        makemarker(:shape, idGlow3, 0, 0, false);
        setmarker(:shape, idGlow3, 100, 0, 1);
        setmarker(:drawLayer, idGlow3, 100);
        setmarker(:pos, idGlow3, blockX, blockY);
        setmarker(:color, idGlow3, %6c87fd);
        setmarker(:arc, idGlow3, 180 + 75 / radius , 270 - 75 / radius);
        setmarker(:radius, idGlow3, radius * 8);

        makemarker(:shape, idGlow4, 0, 0, false);
        setmarker(:shape, idGlow4, 100, 0, 1);
        setmarker(:drawLayer, idGlow4, 100);
        setmarker(:pos, idGlow4, blockX, blockY);
        setmarker(:color, idGlow4, %6c87fd);
        setmarker(:arc, idGlow4, 270 + 75 / radius, 360 - 75 / radius);
        setmarker(:radius, idGlow4, radius * 8);

        makemarker(:texture , idText1, 0, 0, false);
        setmarker(:textureSize, idText1, 1.75, 1.75);
        setmarker(:texture, idText1 , 0, "status-shielded");
        setmarker(:color, idText1, %6c87fd);
        setmarker(:drawLayer, idText1, 100);
        setmarker(:minimap, idText1, 1);

        makemarker(:texture , idText2, 0, 0, false);
        setmarker(:textureSize, idText2, 1.75, 1.75);
        setmarker(:texture, idText2 , 0, "status-shielded");
        setmarker(:color, idText2, %6c87fd);
        setmarker(:drawLayer, idText2, 100);
        setmarker(:minimap, idText2, 1);

        makemarker(:texture , idText3, 0, 0, false);
        setmarker(:textureSize, idText3, 1.75, 1.75);
        setmarker(:texture, idText3 , 0, "status-shielded");
        setmarker(:color, idText3, %6c87fd);
        setmarker(:drawLayer, idText3, 100);
        setmarker(:minimap, idText3, 1);

        makemarker(:texture , idText4, 0, 0, false);
        setmarker(:textureSize, idText4, 1.75, 1.75);
        setmarker(:texture, idText4 , 0, "status-shielded");
        setmarker(:color, idText4, %6c87fd);
        setmarker(:drawLayer, idText4, 100);
        setmarker(:minimap, idText4, 1);

        makemarker(:texture , idText5, 0, 0, false);
        setmarker(:textureSize, idText5, 1.65, 1.65);
        setmarker(:texture, idText5 , 0, "status-shielded");
        setmarker(:color, idText5, %6c87fd);
        setmarker(:drawLayer, idText5, 100);
        setmarker(:minimap, idText5, 1);
        setmarker(:pos, idText5, blockX, blockY);

        /*
        makemarker(:shape, idWave, 0, 0, false);
        setmarker(:shape, idWave, 100, 1, 0);
        setmarker(:stroke, idWave, 4);
        setmarker(:drawLayer, idWave, 50);
        setmarker(:pos, idWave, blockX, blockY);
        setmarker(:color, idWave, %6c87fd);
        */

    end;

    var angle = @tick / 4;

    setmarker(:stroke, idGlow1, abs(cos(@tick) * 4) + 2);
    setmarker(:rotation, idGlow1, angle);

    setmarker(:stroke, idGlow2, abs(cos(@tick) * 4) + 2);
    setmarker(:rotation, idGlow2, angle);

    setmarker(:stroke, idGlow3, abs(cos(@tick) * 4) + 2);
    setmarker(:rotation, idGlow3, angle);

    setmarker(:stroke, idGlow4, abs(cos(@tick) * 4) + 2);
    setmarker(:rotation, idGlow4, angle);

    var iconX = blockX + cos(@tick / 4) * (radius + 0.15);
    var iconY = blockY + sin(@tick / 4) * (radius + 0.15);

    setmarker(:pos, idText1, iconX, iconY);
    setmarker(:rotation, idText1, angle(iconX - blockX, iconY - blockY) - 90);

    iconX = blockX + cos(@tick / 4 + 90) * (radius + 0.15);
    iconY = blockY + sin(@tick / 4 + 90) * (radius + 0.15);

    setmarker(:pos, idText2, iconX, iconY);
    setmarker(:rotation, idText2, angle(iconX - blockX, iconY - blockY) - 90);

    iconX = blockX + cos(@tick / 4 + 180) * (radius + 0.15);
    iconY = blockY + sin(@tick / 4 + 180) * (radius + 0.15);

    setmarker(:pos, idText3, iconX, iconY);
    setmarker(:rotation, idText3, angle(iconX - blockX, iconY - blockY) - 90);

    iconX = blockX + cos(@tick / 4 + 270) * (radius + 0.15);
    iconY = blockY + sin(@tick / 4 + 270) * (radius + 0.15);

    setmarker(:pos, idText4, iconX, iconY);
    setmarker(:rotation, idText4, angle(iconX - blockX, iconY - blockY) - 90);

    /*
    var t = ((@second / 2 * radius) % radius) / radius;
    var eased = 1 - (1 - t) * (1 - t);
    var color = packcolor(108/255, 135/255, 253/255, eased * 0.75);

    setmarker(:radius, idWave, (radius - eased * (radius)) * 8);
    setmarker(:color, idWave, color);
    */

    if baseBlock.sensor(@dead) then

        effect(:sparkExplosion, blockX, blockY, %6c87fd);
        setmarker(:remove, idShield);
        setmarker(:remove, idGlow1);
        setmarker(:remove, idGlow2);
        setmarker(:remove, idGlow3);
        setmarker(:remove, idGlow4);
        setmarker(:remove, idText1);
        setmarker(:remove, idText2);
        setmarker(:remove, idText3);
        setmarker(:remove, idText4);
        setmarker(:remove, idWave);
        setmarker(:remove, idText5);
        stopProcessor();

    end;


end;

void server()

    if baseBlock.sensor(@dead) then stopProcessor(); end;

    for var i in 0 .. fetch(:unitCount, playerTeam, null) do

        var unit = fetch(:unit, playerTeam, i, null);
        if !isFlying(unit) then continue; end;

        var unitX = unit.sensor(@x);
        var unitY = unit.sensor(@y);
        var angle = angle(unitX - blockX, unitY - blockY);
        var distance = len(unitX - blockX, unitY - blockY);
        var unitSize = unit.sensor(@size);

        noinit radiusFixed;
        if distance < radius then
            radiusFixed = radius - unitSize / 2;
        else
            radiusFixed = radius + unitSize / 2;
        end;

    if distance >= radiusFixed - buffer && distance <= radiusFixed + buffer then

        if distance - (radiusFixed - buffer) < (radiusFixed + buffer) - distance then

            unit.setprop(@x, blockX + cos(angle) * (radiusFixed - buffer));
            unit.setprop(@y, blockY + sin(angle) * (radiusFixed - buffer));
        else
            // Closer to outer edge
            unit.setprop(@x, blockX + cos(angle) * (radiusFixed + buffer));
            unit.setprop(@y, blockY + sin(angle) * (radiusFixed + buffer));
        end;
    end;

    end;

end;

def isFlying(in unit)

    var id = unit.sensor(@type).sensor(@id);
    case id
        when 14 .. 25, 35 .. 37, 49 .. 55 then return 1;
        when 5 .. 8 then
            if unit.sensor(@boosting) then return 1; else return 0; end;
        else return 0;
    end;
end;