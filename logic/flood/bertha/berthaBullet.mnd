#set syntax = strict;
require "../../../logic/libs/interfaceLibrary.mnd";

module berthaBullet;
volatile processorId = "berthaBullet";


noinit deltaTime, time;

const shotSpeed = 100;

var titleColor = "[orange]";
var subtitleColor = "[gold]";
var highlightColor = "[blue]";
var textColor = "[white]";

begin
    setrate(1000);
end;

remote void bullet(in bulletX, in bulletY, in targetX, in targetY, phaseBoosted)

    time = @second;

    if @server then

        var shotEta = len(bulletX - targetX, bulletY - targetY) / shotSpeed;
        wait(shotEta);

        noinit barrier;

        if isBlocked(targetX, targetY, out barrier) then
            var barrierRadius = barrier.read(".serverRadius");
            barrier.write(barrierRadius - 7.5, ".serverRadius");
        else
            explosion(@sharded, targetX, targetY, 12, 3000, 1, 1, 1, true);
            if phaseBoosted then
                var unit = spawn(@scathe-missile, 0, 0, 0, @sharded);
                unit.setprop(@x, targetX);
                unit.setprop(@y, targetY);
                unit.setprop(@health, 0);
            end;
        end;
    end;

    if @clientUnit != null then

        var targetAngle = angle(bulletX - targetX, bulletY - targetY);

        do

            wait(1/60/60);
            deltaTime = @second - time;
            time = @second;

            bulletX -= shotSpeed * cos(targetAngle) * deltaTime;
            bulletY -= shotSpeed * sin(targetAngle) * deltaTime;
            effect(:shootBig, bulletX, bulletY, targetAngle, %ff6363);

        while len(bulletX - targetX, bulletY - targetY) > 2.5;


        noinit barrier;
        if isBlocked(targetX, targetY, out barrier) then
            effect(:crossExplosion, targetX, targetY, 120, %6c87fd);
            effect(:sparkExplosion, targetX, targetY, %6c87fd);
        else
            effect(:explosion, targetX, targetY, 5);
        end;
    end;
end;

def isBlocked(in targetX, in targetY, in out processorOut)

    for var i in 0 .. fetch(:buildCount, @sharded, @world-processor) - 1 do
        var processor = fetch(:build, @sharded, i, @world-processor);

        if processor.read(".processorId") == "floodBarrier" then

            var barrierX = processor.read(".shieldX");
            var barrierY = processor.read(".shieldY");
            var barrierRadius = processor.read(".serverRadius");

            if len(targetX - barrierX, targetY - barrierY) < barrierRadius then
                processorOut = processor;
                return 1;
            end;
        end;
    end;
    return 0;
end;