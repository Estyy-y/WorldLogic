#set syntax = strict;
require "../../../logic/libs/interfaceLibrary.mnd";

module berthaBullet;
volatile processorId = "berthaBullet";

const shotSpeed = 100;
const baseRadius = 6;
const baseShieldDamage = 5;

var baseDamage = 300;
noinit damage, radius, shieldDamage;
noinit deltaTime, time;

var titleColor = "[orange]";
var subtitleColor = "[gold]";
var highlightColor = "[blue]";
var textColor = "[white]";

begin
    setrate(1000);
end;

remote void bullet(in bulletX, in bulletY, in targetX, in targetY, blastBoosted, surgeBoosted, phaseBoosted, carbideBoosted)

    time = @second;
    damage = baseDamage;
    if blastBoosted then damage *= 1.5; end;
    if carbideBoosted then damage *= 2; end;

    radius = baseRadius;
    if blastBoosted then radius *= 2; end;

    shieldDamage = baseShieldDamage;
    if surgeBoosted then shieldDamage *= 0.5; end;
    if carbideBoosted then shieldDamage *= 3; end;

    noinit anticreepSize;
    if blastBoosted then
        anticreepSize = @scathe-missile;
    else
        anticreepSize = @scathe-missile-surge-split;
    end;

    if @server then

        var shotEta = len(bulletX - targetX, bulletY - targetY) / shotSpeed;
        wait(shotEta);

        noinit barrier;

        if isBlocked(targetX, targetY, out barrier) then
            var barrierHealth = barrier.read(".shieldHealth");
            barrier.write(barrierHealth - shieldDamage, ".shieldHealth");
        else
            explosion(@sharded, targetX, targetY, radius, damage, 1, 1, 1, true);
            explosion(@sharded, targetX, targetY, radius / 3, damage * 2, 1, 1, 1, true);
            if phaseBoosted then
                var unit = spawn(anticreepSize, 0, 0, 0, @sharded);
                unit.setprop(@x, targetX);
                unit.setprop(@y, targetY);
                unit.setprop(@health, 0);
            end;
        end;

        //If this is done before the shots are created, there's a slight delay
        for var i in 0 .. fetch(:buildCount, @sharded, @world-processor) - 1 do
            var processor = fetch(:build, @sharded, i, @world-processor);

            if processor.read(".processorId") == "forge" then
                baseDamage = 300 * processor.read(".blockDamage");
            end;
        end;
    end;

    //This doesn't work in single player but honestly idgaf
    if @clientUnit != null then

        var targetAngle = angle(bulletX - targetX, bulletY - targetY);

        do

            wait(1/60/60);
            deltaTime = @second - time;
            time = @second;

            bulletX -= shotSpeed * cos(targetAngle) * deltaTime;
            bulletY -= shotSpeed * sin(targetAngle) * deltaTime;
            effect(:shootBig, bulletX, bulletY, targetAngle, %ff6363);

        while len(bulletX - targetX, bulletY - targetY) > 2.5;


        noinit barrier;
        if isBlocked(targetX, targetY, out barrier) then
            effect(:crossExplosion, targetX, targetY, 120, %6c87fd);
            effect(:sparkExplosion, targetX, targetY, %6c87fd);
            playsound(:true, @sfx-shockBlast, 1, 1.75, bulletX, bulletY, 1);
        else
            effect(:explosion, targetX, targetY, radius / 2);
            playsound(:true, @sfx-largeExplosion, 1, 0.5, bulletX, bulletY, 1);
        end;
    end;
end;

def isBlocked(in targetX, in targetY, in out processorOut)

    for var i in 0 .. fetch(:buildCount, @sharded, @world-processor) - 1 do
        var processor = fetch(:build, @sharded, i, @world-processor);

        if processor.read(".processorId") == "floodBarrier" then

            var barrierX = processor.read(".shieldX");
            var barrierY = processor.read(".shieldY");
            var barrierRadius = processor.read(".serverRadius");

            if len(targetX - barrierX, targetY - barrierY) < barrierRadius then
                processorOut = processor;
                return 1;
            end;
        end;
    end;
    return 0;
end;