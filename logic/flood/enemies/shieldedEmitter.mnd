// Needs a linked emitter.

#set syntax = strict;
require "../../../logic/libs/interfaceLibrary.mnd";
require "../../../logic/libs/mathLibrary.mnd";

volatile processorId = "floodBarrier";
param maxRadius = 30;
param shieldMaxHealth = 250;
param baseShieldRegen = 20;
param maxRegenScale = 3;

noinit time, deltaTime, didEffect, lastSync;
volatile noinit shield;
noinit shieldX, shieldY, shieldSize, shieldRadius, shieldRegen, suspended, breakTime;
volatile noinit shieldHealth;

var id = getId(out id);
var idShield = id;
var idGlow1 = id + 1;
var idGlow2 = id + 2;
var idGlow3 = id + 3;
var idGlow4 = id + 4;
var idText1 = id + 6;
var idText2 = id + 7;
var idText3 = id + 8;
var idText4 = id + 9;
var idText5 = id + 10;
var idTooltip = id + 11;
var idHover = id + 12;

var titleColor = "[orange]";
var subtitleColor = "[gold]";
var highlightColor = "[blue]";
var textColor = "[white]";

begin

    setrate(1000);

    setmarker(:remove, idShield);
    setmarker(:remove, idGlow1);
    setmarker(:remove, idGlow2);
    setmarker(:remove, idGlow3);
    setmarker(:remove, idGlow4);
    setmarker(:remove, idText1);
    setmarker(:remove, idText2);
    setmarker(:remove, idText3);
    setmarker(:remove, idText4);
    setmarker(:remove, idText5);

    time = @second;
    lastSync = @second;
    shield = getlink(0);
    shieldX = shield.sensor(@x);
    shieldY = shield.sensor(@y);
    shieldSize = shield.sensor(@size);
    shieldHealth = shieldMaxHealth;
    shieldRadius = 0;


    if shield != null && !shield.sensor(@dead) then
        initialize();
    end;

    if @server then do
        if @client then break; end;
        common();
        server();
        if @clientUnit != null then client(); end;
    while true; end;

    if @client then do
        common();
        client();
    while true; end;

end;

noinline void common()

    wait(1/60/60);
    deltaTime = @second - time;
    time = @second;

    //The Big Bertha (Bullet) is the only thing that interacts with shield Health (for now)
    //Suspend the shield for 10 seconds if the HP drops below 1
    if shieldHealth < 1 && !suspended then breakTime = @second + 15; end;

    //Kickstart the shield when the breakTime ends
    if @second > breakTime && shieldHealth < 1 then
        shieldHealth = max(5, shieldMaxHealth * 0.1);
    end;

    suspended = isSuspended(shieldX, shieldY, shieldSize) || (breakTime > @second && shieldHealth < 1);

    shieldRegen = baseShieldRegen * (1 + (maxRegenScale - 1) * (1 - shieldHealth / shieldMaxHealth));
    if suspended then shieldRegen = shieldMaxHealth * -0.01; end;

    if !suspended then
        const minFactor = 0.25;
        var healthRatio = shieldHealth / shieldMaxHealth;
        shieldRadius = maxRadius * (minFactor + (1 - minFactor) * healthRatio);
    else
        shieldHealth = 0;
        shieldRadius = 0;
    end;
end;

noinline void server()

    if shield.sensor(@dead) || shield == null then
        didEffect = 1;
        setrate(10);
        return;
    end;

    if @second > lastSync then
        lastSync = @second + 15;
        sync(shield);
    end;

    shieldHealth = clamp(shieldHealth + shieldRegen * deltaTime, 0, shieldMaxHealth);
    sync(shieldHealth);

    for var team in @crux, @sharded, @malis, @green do
        for var i in 0 .. fetch(:unitCount, team, null) - 1 do

            var unit = fetch(:unit, team, i, null);
            noinit shieldDamage;
            if !isBlocked(unit, out shieldDamage) then continue; end;

            var unitX = unit.sensor(@x);
            var unitY = unit.sensor(@y);
            var shieldDX = unitX - shieldX;
            var shieldDY = unitY - shieldY;
            var distance = len(shieldDX, shieldDY);
            var unitSize = unit.sensor(@size);

            noinit pushDistance;

            if distance < shieldRadius + unitSize / 2 then
                pushDistance = shieldRadius + unitSize / 2;

                var dirX = shieldDX / distance;
                var dirY = shieldDY / distance;

                var newX = shieldX + dirX * pushDistance;
                var newY = shieldY + dirY * pushDistance;

                unit.setprop(@x, newX);
                unit.setprop(@y, newY);

                if shieldDamage != null then
                    unit.setprop(@health, 0);
                    shieldHealth -= shieldDamage;
                end;
            end;
        end;
    end;
end;

noinline void client()

    var dead = shield.sensor(@dead);
    if dead || shield == null then
        if !didEffect then
            effect(:sparkExplosion, shieldX, shieldY, %6c87fd);
            didEffect = 1;
        end;
        setmarker(:remove, idShield);
        setmarker(:remove, idGlow1);
        setmarker(:remove, idGlow2);
        setmarker(:remove, idGlow3);
        setmarker(:remove, idGlow4);
        setmarker(:remove, idText1);
        setmarker(:remove, idText2);
        setmarker(:remove, idText3);
        setmarker(:remove, idText4);
        setmarker(:remove, idText5);
        setmarker(:remove, idTooltip);
        setrate(10);
        return;
    end;

    print("[blue] Shielded Emitter \n");
    if !suspended then
        print("[blue] [white]", ceil(shieldRadius / maxRadius * 100), "%\n");
        print("[blue] [white]", ceil(shieldHealth), " / ", shieldMaxHealth, " (+");
        printDecimals(shieldRegen, 0);
        print("/s)");
    else
        if breakTime > @second then
            print("[red] Broken (", ceil(breakTime - @second), "...)");
        else
            print("[red] Suspended");
        end;
    end;
    hoverMarker(idTooltip, shield, shieldX, shieldY - shieldSize);



    var angle = @tick / 4;
    var radius = max(0.1, min(maxRadius, radius + (shieldRadius - radius) * deltaTime));
    var radiusDisplay = radius * 8;

    setmarker(:radius, idShield, radiusDisplay + 12);

    setmarker(:stroke, idGlow1, abs(cos(@tick) * 4) + 2);
    setmarker(:rotation, idGlow1, angle);
    setmarker(:arc, idGlow1, 75 / radius , 90 - 75 / radius);
    setmarker(:radius, idGlow1, radiusDisplay);

    setmarker(:stroke, idGlow2, abs(cos(@tick) * 4) + 2);
    setmarker(:rotation, idGlow2, angle);
    setmarker(:arc, idGlow2, 90 + 75 / radius, 180 - 75 / radius);
    setmarker(:radius, idGlow2, radiusDisplay);

    setmarker(:stroke, idGlow3, abs(cos(@tick) * 4) + 2);
    setmarker(:rotation, idGlow3, angle);
    setmarker(:arc, idGlow3, 180 + 75 / radius , 270 - 75 / radius);
    setmarker(:radius, idGlow3, radiusDisplay);

    setmarker(:stroke, idGlow4, abs(cos(@tick) * 4) + 2);
    setmarker(:rotation, idGlow4, angle);
    setmarker(:arc, idGlow4, 270 + 75 / radius, 360 - 75 / radius);
    setmarker(:radius, idGlow4, radiusDisplay);

    var iconX = shieldX + cos(@tick / 4) * (radius + 0.15);
    var iconY = shieldY + sin(@tick / 4) * (radius + 0.15);

    setmarker(:pos, idText1, iconX, iconY);
    setmarker(:rotation, idText1, angle(iconX - shieldX, iconY - shieldY) - 90);

    iconX = shieldX + cos(@tick / 4 + 90) * (radius + 0.15);
    iconY = shieldY + sin(@tick / 4 + 90) * (radius + 0.15);

    setmarker(:pos, idText2, iconX, iconY);
    setmarker(:rotation, idText2, angle(iconX - shieldX, iconY - shieldY) - 90);

    iconX = shieldX + cos(@tick / 4 + 180) * (radius + 0.15);
    iconY = shieldY + sin(@tick / 4 + 180) * (radius + 0.15);

    setmarker(:pos, idText3, iconX, iconY);
    setmarker(:rotation, idText3, angle(iconX - shieldX, iconY - shieldY) - 90);

    iconX = shieldX + cos(@tick / 4 + 270) * (radius + 0.15);
    iconY = shieldY + sin(@tick / 4 + 270) * (radius + 0.15);

    setmarker(:pos, idText4, iconX, iconY);
    setmarker(:rotation, idText4, angle(iconX - shieldX, iconY - shieldY) - 90);

    var unit = @clientUnit;
    noinit shieldDamage;
    if isBlocked(unit, out shieldDamage) then

        var unitX = unit.sensor(@x);
        var unitY = unit.sensor(@y);
        angle = angle(unitX - shieldX, unitY - shieldY);
        var distance = len(unitX - shieldX, unitY - shieldY);
        var unitSize = unit.sensor(@size);

        noinit pushDistance;
        if distance < radius + unitSize / 2 then
            pushDistance = radius + unitSize / 2;

            unit.setprop(@x, shieldX + cos(angle) * pushDistance);
            unit.setprop(@y, shieldY + sin(angle) * pushDistance);
        end;
    end;
end;

inline void initialize()

    makemarker(:shape, idShield, 0, 0, false);
    setmarker(:shape, idShield, 100, 1, 1);
    setmarker(:stroke, idShield, 12);
    setmarker(:drawLayer, idShield, 125);
    setmarker(:color, idShield, %6c87fd);
    setmarker(:pos, idShield, shieldX, shieldY);

    makemarker(:shape, idGlow1, 0, 0, false);
    setmarker(:shape, idGlow1, 100, 0, 1);
    setmarker(:drawLayer, idGlow1, 100);
    setmarker(:pos, idGlow1, shieldX, shieldY);
    setmarker(:color, idGlow1, %6c87fd);

    makemarker(:shape, idGlow2, 0, 0, false);
    setmarker(:shape, idGlow2, 100, 0, 1);
    setmarker(:drawLayer, idGlow2, 100);
    setmarker(:pos, idGlow2, shieldX, shieldY);
    setmarker(:color, idGlow2, %6c87fd);

    makemarker(:shape, idGlow3, 0, 0, false);
    setmarker(:shape, idGlow3, 100, 0, 1);
    setmarker(:drawLayer, idGlow3, 100);
    setmarker(:pos, idGlow3, shieldX, shieldY);
    setmarker(:color, idGlow3, %6c87fd);

    makemarker(:shape, idGlow4, 0, 0, false);
    setmarker(:shape, idGlow4, 100, 0, 1);
    setmarker(:drawLayer, idGlow4, 100);
    setmarker(:pos, idGlow4, shieldX, shieldY);
    setmarker(:color, idGlow4, %6c87fd);

    makemarker(:texture , idText1, 0, 0, false);
    setmarker(:textureSize, idText1, 1.75, 1.75);
    setmarker(:texture, idText1 , 0, "status-shielded");
    setmarker(:color, idText1, %6c87fd);
    setmarker(:drawLayer, idText1, 100);

    makemarker(:texture , idText2, 0, 0, false);
    setmarker(:textureSize, idText2, 1.75, 1.75);
    setmarker(:texture, idText2 , 0, "status-shielded");
    setmarker(:color, idText2, %6c87fd);
    setmarker(:drawLayer, idText2, 100);

    makemarker(:texture , idText3, 0, 0, false);
    setmarker(:textureSize, idText3, 1.75, 1.75);
    setmarker(:texture, idText3 , 0, "status-shielded");
    setmarker(:color, idText3, %6c87fd);
    setmarker(:drawLayer, idText3, 100);

    makemarker(:texture , idText4, 0, 0, false);
    setmarker(:textureSize, idText4, 1.75, 1.75);
    setmarker(:texture, idText4 , 0, "status-shielded");
    setmarker(:color, idText4, %6c87fd);
    setmarker(:drawLayer, idText4, 100);

    makemarker(:texture , idText5, 0, 0, false);
    setmarker(:textureSize, idText5, 1.65, 1.65);
    setmarker(:texture, idText5 , 0, "status-shielded");
    setmarker(:color, idText5, %6c87fd);
    setmarker(:drawLayer, idText5, 100);
    setmarker(:pos, idText5, shieldX, shieldY);

end;

inline def isBlocked(in unit, in out shieldDamage)
    if unit.sensor(@team) == 5 then return 0; end;
    var id = unit.sensor(@type).sensor(@id);
    case id
        when 10, 14 .. 25, 35 .. 37, 49 .. 55 then shieldDamage = 0; return 1;
        when 5 .. 8 then
            if unit.sensor(@boosting) then shieldDamage = 0; return 1; else return 0; end;
        when 0 then
            case unit.sensor(@type)
                when @anthicus-missile then shieldDamage = 1; return 1;
                when @quell-missile then shieldDamage = 5; return 1;
                when @disrupt-missile then shieldDamage = 10; return 1;
                when @scathe-missile-surge, @scathe-missile-phase then shieldDamage = 60; return 1;
                when @scathe-missile then shieldDamage = 120; return 1;
            end;
    end;
end;

inline def isSuspended(in x, in y, in size)
    var baseX = ceil(x - size / 2);
    var baseY = ceil(y - size / 2);
    for var dx in 0 ... size do
        if !hasFlood(baseX + dx, baseY - 1) then return 1; end;
        if !hasFlood(baseX + dx, baseY + size) then return 1; end;
    end;
    for var dy in 0 ... size do
        if !hasFlood(baseX - 1, baseY + dy) then return 1; end;
        if !hasFlood(baseX + size, baseY + dy) then return 1; end;
    end;
    return 0;
end;

noinline def hasFlood(in x, in y);
    if getblock(:building, x, y).sensor(@team) == 5 then return 1;
    else return 0; end;
end;
