set .processorId "forge"
set .offsetX 6
op add *tmp1 @thisx @thisy
op add *tmp3 *tmp1 1
op mul *tmp4 *tmp1 *tmp3
op div *tmp5 *tmp4 2
op add *tmp6 *tmp5 @thisy
op mul *tmp0 *tmp6 1000
op add .idForge *tmp0 1
op add .idForgeDisplay *tmp0 2
op add .idForgeUpgrades *tmp0 3
op add .idForgeAetherDisplay *tmp0 4
op add .idPopup *tmp0 5
set .popupDismissed false
set .upgrade 0
set .upgradeList*0 "Unit Capacity"
set .upgradeList*1 ""
set .upgradeList*2 50
set .upgradeList*3 50
set .upgradeList*4 "additive"
set .upgradeList*5 0
set .upgradeList*6 25
set .upgradeList*7 1
set .upgradeList*8 "Unit Health"
set .upgradeList*9 ""
set .upgradeList*10 75
set .upgradeList*11 2
set .upgradeList*12 "multiplicative"
set .upgradeList*13 0
set .upgradeList*14 0
set .upgradeList*15 0.2
set .upgradeList*16 "Unit Damage"
set .upgradeList*17 ""
set .upgradeList*18 100
set .upgradeList*19 2
set .upgradeList*20 "multiplicative"
set .upgradeList*21 0
set .upgradeList*22 0
set .upgradeList*23 0.2
set .upgradeList*24 "Unit Cost"
set .upgradeList*25 ""
set .upgradeList*26 200
set .upgradeList*27 1.4
set .upgradeList*28 "multiplicative"
set .upgradeList*29 0
set .upgradeList*30 15
set .upgradeList*31 -0.05
set .upgradeList*32 "Unit Build Speed"
set .upgradeList*33 ""
set .upgradeList*34 300
set .upgradeList*35 100
set .upgradeList*36 "additive"
set .upgradeList*37 0
set .upgradeList*38 5
set .upgradeList*39 0.2
set .upgradeList*40 "Unit Mining Speed"
set .upgradeList*41 ""
set .upgradeList*42 150
set .upgradeList*43 1.2
set .upgradeList*44 "multiplicative"
set .upgradeList*45 0
set .upgradeList*46 0
set .upgradeList*47 0.06
set .upgradeList*48 "Block Health"
set .upgradeList*49 ""
set .upgradeList*50 75
set .upgradeList*51 2
set .upgradeList*52 "multiplicative"
set .upgradeList*53 0
set .upgradeList*54 0
set .upgradeList*55 0.2
set .upgradeList*56 "Block Damage"
set .upgradeList*57 ""
set .upgradeList*58 100
set .upgradeList*59 2
set .upgradeList*60 "multiplicative"
set .upgradeList*61 0
set .upgradeList*62 0
set .upgradeList*63 0.2
set .upgradeList*64 "Block Build Speed"
set .upgradeList*65 ""
set .upgradeList*66 200
set .upgradeList*67 2.5
set .upgradeList*68 "multiplicative"
set .upgradeList*69 0
set .upgradeList*70 5
set .upgradeList*71 0.4
set .baseUnitCap 25
setrate 1000
sensor .team @this @team
set .interfaceX 76.5
setmarker remove .idForge 0 0 0
setmarker remove .idForgeDisplay 0 0 0
setmarker remove .idForgeUpgrades 0 0 0
setmarker remove .idForgeAetherDisplay 0 0 0
setmarker remove .idPopup 0 0 0
jump 106 equal @server false
set :common*retaddr 103
set :server*retaddr 104
set :client*retaddr 105
jump 102 equal @client false
end
jump 168 always 0 0
jump 203 always 0 0
jump 484 always 0 0
jump 100 always 0 0
jump 0 equal @client false
set :common*retaddr 110
set :client*retaddr 111
jump 168 always 0 0
jump 484 always 0 0
jump 109 always 0 0
fetch playerCount :mapButton:playerCount :mapButton:playerTeam 0 0
set :mapButton:i 0
op div *tmp22 :mapButton:width 2
op sub *tmp23 :mapButton:centerX *tmp22
op add *tmp26 :mapButton:centerX *tmp22
op div *tmp29 :mapButton:height 2
op sub *tmp30 :mapButton:centerY *tmp29
op add *tmp34 :mapButton:centerY *tmp29
jump 141 greaterThan 0 :mapButton:playerCount
fetch player :mapButton:player :mapButton:playerTeam :mapButton:i 0
sensor :mapButton:cursorX :mapButton:player @shootX
sensor :mapButton:cursorY :mapButton:player @shootY
op greaterThanEq *tmp24 :mapButton:cursorX *tmp23
op lessThanEq *tmp27 :mapButton:cursorX *tmp26
op land *tmp28 *tmp24 *tmp27
op greaterThanEq *tmp31 :mapButton:cursorY *tmp30
op land *tmp32 *tmp28 *tmp31
op lessThanEq *tmp35 :mapButton:cursorY *tmp34
op land :mapButton:isHovering *tmp32 *tmp35
sensor :mapButton:isClicking :mapButton:player @shooting
op land *tmp38 :mapButton:isHovering :mapButton:isClicking
jump 136 equal *tmp38 false
set :mapButton*retval 2
set @counter :mapButton*retaddr
jump 139 equal :mapButton:isHovering false
set :mapButton*retval 1
set @counter :mapButton*retaddr
op add :mapButton:i :mapButton:i 1
jump 121 lessThanEq :mapButton:i :mapButton:playerCount
set :mapButton*retval 0
set @counter :mapButton*retaddr
sensor :playerButton:cursorX :playerButton:player @shootX
sensor :playerButton:cursorY :playerButton:player @shootY
op div *tmp112 :playerButton:width 2
op sub *tmp113 :playerButton:centerX *tmp112
op greaterThanEq *tmp114 :playerButton:cursorX *tmp113
op add *tmp116 :playerButton:centerX *tmp112
op lessThanEq *tmp117 :playerButton:cursorX *tmp116
op land *tmp118 *tmp114 *tmp117
op div *tmp119 :playerButton:height 2
op sub *tmp120 :playerButton:centerY *tmp119
op greaterThanEq *tmp121 :playerButton:cursorY *tmp120
op land *tmp122 *tmp118 *tmp121
op add *tmp124 :playerButton:centerY *tmp119
op lessThanEq *tmp125 :playerButton:cursorY *tmp124
op land :playerButton:isHovering *tmp122 *tmp125
sensor :playerButton:isClicking :playerButton:player @shooting
op land *tmp128 :playerButton:isHovering :playerButton:isClicking
jump 163 equal *tmp128 false
set :playerButton*retval 2
set @counter :playerButton*retaddr
jump 166 equal :playerButton:isHovering false
set :playerButton*retval 1
set @counter :playerButton*retaddr
set :playerButton*retval 0
set @counter :playerButton*retaddr
op equal *tmp210 .forgeBlock null
sensor *tmp211 .forgeBlock @dead
op or *tmp213 *tmp210 *tmp211
jump 173 equal *tmp213 false
fetch build .forgeBlock @sharded 0 @flux-reactor
sensor .forgeX .forgeBlock @x
sensor .forgeY .forgeBlock @y
op mul *tmp218 .upgradeList*7 .upgradeList*5
op add *tmp219 .baseUnitCap *tmp218
setrule unitCap *tmp219 0 0 0 0
op mul *tmp220 .upgradeList*15 .upgradeList*13
op add *tmp221 1 *tmp220
setrule unitHealth *tmp221 .team 0 0 0
op mul *tmp222 .upgradeList*23 .upgradeList*21
op add *tmp223 1 *tmp222
setrule unitDamage *tmp223 .team 0 0 0
op mul *tmp224 .upgradeList*31 .upgradeList*29
op add *tmp225 1 *tmp224
setrule unitCost *tmp225 .team 0 0 0
op mul *tmp226 .upgradeList*39 .upgradeList*37
op add *tmp227 1 *tmp226
setrule unitBuildSpeed *tmp227 .team 0 0 0
op mul *tmp228 .upgradeList*47 .upgradeList*45
op add :setMiningSpeed:value 1 *tmp228
setrule unitMineSpeed :setMiningSpeed:value .team
op mul *tmp230 .upgradeList*55 .upgradeList*53
op add *tmp231 1 *tmp230
setrule blockHealth *tmp231 .team 0 0 0
op mul *tmp232 .upgradeList*63 .upgradeList*61
op add *tmp233 1 *tmp232
setrule blockDamage *tmp233 .team 0 0 0
op mul *tmp234 .upgradeList*71 .upgradeList*69
op add *tmp235 1 *tmp234
setrule buildSpeed *tmp235 .team 0 0 0
set @counter :common*retaddr
set .aetherProduction 0
fetch buildCount *tmp236 @sharded 0 @world-processor
op sub *tmp238 *tmp236 1
set :server:i 0
jump 219 greaterThan 0 *tmp238
fetch build :server:processor @sharded :server:i @world-processor
read :server:processorId :server:processor ".processorId"
jump 217 notEqual :server:processorId "totem"
read *tmp243 :server:processor ".active"
jump 217 equal *tmp243 0
read *tmp246 :server:processor ".aetherAmount"
read *tmp247 :server:processor ".aetherCooldown"
op div *tmp248 *tmp246 *tmp247
op add .aetherProduction .aetherProduction *tmp248
op add :server:i :server:i 1
jump 208 lessThanEq :server:i *tmp238
sync .aetherProduction
sensor *tmp250 .forgeBlock @efficiency
op mul *tmp251 *tmp250 3
op add .aetherMultiplier *tmp251 1
jump 229 lessThanEq @second .nextUpdate
op add .nextUpdate @second 1
op mul *tmp256 .aetherProduction .aetherMultiplier
op add .totalAether .totalAether *tmp256
sync .totalAether
sync .aetherMultiplier
op add *tmp258 .interfaceX .offsetX
op sub :mapButton:centerX *tmp258 5.75
set :mapButton:centerY -3.6
set :mapButton:width 3.5
set :mapButton:height 2
set :mapButton:playerTeam .team
set :mapButton*retaddr 237
jump 112 always 0 0
set :server:previousUpgrade :mapButton*retval
op add *tmp261 .interfaceX .offsetX
op add :mapButton:centerX *tmp261 5.75
set :mapButton:centerY -3.6
set :mapButton:width 3.5
set :mapButton:height 2
set :mapButton:playerTeam .team
set :mapButton*retaddr 246
jump 112 always 0 0
op equal *tmp264 :server:previousUpgrade 2
op greaterThan *tmp265 @second .buttonCooldown
op land *tmp266 *tmp264 *tmp265
jump 255 equal *tmp266 false
jump 253 notEqual .upgrade 0
set .upgrade 64
jump 254 always 0 0
op sub .upgrade .upgrade 8
op add .buttonCooldown @second 0.5
op equal *tmp272 :mapButton*retval 2
op greaterThan *tmp273 @second .buttonCooldown
op land *tmp274 *tmp272 *tmp273
jump 264 equal *tmp274 false
jump 262 notEqual .upgrade 64
set .upgrade 0
jump 263 always 0 0
op add .upgrade .upgrade 8
op add .buttonCooldown @second 0.5
sync .upgrade
op add :mapButton:centerX .interfaceX .offsetX
set :mapButton:centerY -16.75
set :mapButton:width 3.5
set :mapButton:height 2
set :mapButton:playerTeam .team
set :mapButton*retaddr 272
jump 112 always 0 0
op equal *tmp282 :mapButton*retval 2
op greaterThan *tmp283 @second .buttonCooldown
op land *tmp284 *tmp282 *tmp283
jump 472 equal *tmp284 false
op add *tmp287 .upgrade 5
set .upgradeList*rret 280
op mul *tmp493 *tmp287 2
op add @counter 780 *tmp493
set :server:level .upgradeList*r
op add *tmp290 .upgrade 6
set .upgradeList*rret 285
op mul *tmp494 *tmp290 2
op add @counter 780 *tmp494
set :server:maxLevel .upgradeList*r
op add *tmp292 .upgrade 2
set .upgradeList*rret 290
op mul *tmp495 *tmp292 2
op add @counter 780 *tmp495
set :server:baseCost .upgradeList*r
op add *tmp295 .upgrade 3
set .upgradeList*rret 295
op mul *tmp496 *tmp295 2
op add @counter 780 *tmp496
set :server:costIncrease .upgradeList*r
op add *tmp298 .upgrade 4
set .upgradeList*rret 300
op mul *tmp497 *tmp298 2
op add @counter 780 *tmp497
jump 304 notEqual .upgradeList*r "additive"
op mul *tmp303 :server:costIncrease :server:level
op add :server:cost :server:baseCost *tmp303
jump 306 always 0 0
op pow *tmp305 :server:costIncrease :server:level
op mul :server:cost :server:baseCost *tmp305
jump 471 lessThan .totalAether :server:cost
op lessThan *tmp309 :server:level :server:maxLevel
op equal *tmp310 :server:maxLevel null
op or *tmp312 *tmp309 *tmp310
jump 471 equal *tmp312 false
op add *tmp315 .upgrade 5
set .upgradeList*rret 315
op mul *tmp498 *tmp315 2
op add @counter 780 *tmp498
op add *tmp317 .upgradeList*r 1
op add @counter *tmp498 317
set .upgradeList*0 *tmp317
jump 460 always 0 0
set .upgradeList*1 *tmp317
jump 460 always 0 0
set .upgradeList*2 *tmp317
jump 460 always 0 0
set .upgradeList*3 *tmp317
jump 460 always 0 0
set .upgradeList*4 *tmp317
jump 460 always 0 0
set .upgradeList*5 *tmp317
jump 460 always 0 0
set .upgradeList*6 *tmp317
jump 460 always 0 0
set .upgradeList*7 *tmp317
jump 460 always 0 0
set .upgradeList*8 *tmp317
jump 460 always 0 0
set .upgradeList*9 *tmp317
jump 460 always 0 0
set .upgradeList*10 *tmp317
jump 460 always 0 0
set .upgradeList*11 *tmp317
jump 460 always 0 0
set .upgradeList*12 *tmp317
jump 460 always 0 0
set .upgradeList*13 *tmp317
jump 460 always 0 0
set .upgradeList*14 *tmp317
jump 460 always 0 0
set .upgradeList*15 *tmp317
jump 460 always 0 0
set .upgradeList*16 *tmp317
jump 460 always 0 0
set .upgradeList*17 *tmp317
jump 460 always 0 0
set .upgradeList*18 *tmp317
jump 460 always 0 0
set .upgradeList*19 *tmp317
jump 460 always 0 0
set .upgradeList*20 *tmp317
jump 460 always 0 0
set .upgradeList*21 *tmp317
jump 460 always 0 0
set .upgradeList*22 *tmp317
jump 460 always 0 0
set .upgradeList*23 *tmp317
jump 460 always 0 0
set .upgradeList*24 *tmp317
jump 460 always 0 0
set .upgradeList*25 *tmp317
jump 460 always 0 0
set .upgradeList*26 *tmp317
jump 460 always 0 0
set .upgradeList*27 *tmp317
jump 460 always 0 0
set .upgradeList*28 *tmp317
jump 460 always 0 0
set .upgradeList*29 *tmp317
jump 460 always 0 0
set .upgradeList*30 *tmp317
jump 460 always 0 0
set .upgradeList*31 *tmp317
jump 460 always 0 0
set .upgradeList*32 *tmp317
jump 460 always 0 0
set .upgradeList*33 *tmp317
jump 460 always 0 0
set .upgradeList*34 *tmp317
jump 460 always 0 0
set .upgradeList*35 *tmp317
jump 460 always 0 0
set .upgradeList*36 *tmp317
jump 460 always 0 0
set .upgradeList*37 *tmp317
jump 460 always 0 0
set .upgradeList*38 *tmp317
jump 460 always 0 0
set .upgradeList*39 *tmp317
jump 460 always 0 0
set .upgradeList*40 *tmp317
jump 460 always 0 0
set .upgradeList*41 *tmp317
jump 460 always 0 0
set .upgradeList*42 *tmp317
jump 460 always 0 0
set .upgradeList*43 *tmp317
jump 460 always 0 0
set .upgradeList*44 *tmp317
jump 460 always 0 0
set .upgradeList*45 *tmp317
jump 460 always 0 0
set .upgradeList*46 *tmp317
jump 460 always 0 0
set .upgradeList*47 *tmp317
jump 460 always 0 0
set .upgradeList*48 *tmp317
jump 460 always 0 0
set .upgradeList*49 *tmp317
jump 460 always 0 0
set .upgradeList*50 *tmp317
jump 460 always 0 0
set .upgradeList*51 *tmp317
jump 460 always 0 0
set .upgradeList*52 *tmp317
jump 460 always 0 0
set .upgradeList*53 *tmp317
jump 460 always 0 0
set .upgradeList*54 *tmp317
jump 460 always 0 0
set .upgradeList*55 *tmp317
jump 460 always 0 0
set .upgradeList*56 *tmp317
jump 460 always 0 0
set .upgradeList*57 *tmp317
jump 460 always 0 0
set .upgradeList*58 *tmp317
jump 460 always 0 0
set .upgradeList*59 *tmp317
jump 460 always 0 0
set .upgradeList*60 *tmp317
jump 460 always 0 0
set .upgradeList*61 *tmp317
jump 460 always 0 0
set .upgradeList*62 *tmp317
jump 460 always 0 0
set .upgradeList*63 *tmp317
jump 460 always 0 0
set .upgradeList*64 *tmp317
jump 460 always 0 0
set .upgradeList*65 *tmp317
jump 460 always 0 0
set .upgradeList*66 *tmp317
jump 460 always 0 0
set .upgradeList*67 *tmp317
jump 460 always 0 0
set .upgradeList*68 *tmp317
jump 460 always 0 0
set .upgradeList*69 *tmp317
jump 460 always 0 0
set .upgradeList*70 *tmp317
jump 460 always 0 0
set .upgradeList*71 *tmp317
op sub .totalAether .totalAether :server:cost
sync .totalAether
sync .upgradeList*5
sync .upgradeList*13
sync .upgradeList*21
sync .upgradeList*29
sync .upgradeList*37
sync .upgradeList*45
sync .upgradeList*53
sync .upgradeList*61
sync .upgradeList*69
op add .buttonCooldown @second 0.5
jump 483 lessThanEq @second .nextSync
op add .nextSync @second 5
sync .upgradeList*5
sync .upgradeList*13
sync .upgradeList*21
sync .upgradeList*29
sync .upgradeList*37
sync .upgradeList*45
sync .upgradeList*53
sync .upgradeList*61
sync .upgradeList*69
set @counter :server*retaddr
jump 487 notEqual .team 1
set :client:color %ffd37f
jump 489 always 0 0
jump 489 notEqual .team 2
set :client:color %f25555
sensor *tmp325 .forgeBlock @efficiency
op mul *tmp326 *tmp325 3
op add .aetherMultiplier *tmp326 1
print "[orange] - - - - - - - - - - - - - - - - - - - - \nAether Forge\n\n\n\n\n\n"
makemarker text .idForge 0 0 false
setmarker fontSize .idForge 3 0 0
setmarker labelFlags .idForge 0 1 0
setmarker pos .idForge .interfaceX 3 0
setmarker flushText .idForge 0 0 0
jump 500 equal .forgeBlock .lastForgeBlock
setmarker remove .idForgeDisplay 0 0 0
set .lastForgeBlock .forgeBlock
jump 507 equal .forgeBlock null
makemarker texture .idForgeDisplay 0 0 false
setmarker texture .idForgeDisplay 0 "flux-reactor" 0
op sub *tmp332 .interfaceX 9
setmarker pos .idForgeDisplay *tmp332 -4 0
jump 515 always 0 0
makemarker text .idForgeDisplay 0 0 false
setmarker fontSize .idForgeDisplay 5 0 0
print "[white] "
setmarker flushText .idForgeDisplay 0 0 0
setmarker pos .idForgeDisplay .interfaceX -5 0
setmarker remove .idForgeUpgrades 0 0 0
setmarker remove .idForgeAetherDisplay 0 0 0
setmarker remove .idPopup 0 0 0
jump 779 equal .forgeBlock null
sensor *tmp335 .forgeBlock @size
op div :client:halfSize *tmp335 2
set :client:i 0
op mul *tmp337 @second .aetherMultiplier
op div *tmp338 *tmp337 2
op add *tmp339 *tmp338 :client:i
op mod :client:t *tmp339 4
jump 530 greaterThanEq :client:t 1
op sub *tmp343 .forgeX :client:halfSize
op mul *tmp344 :client:t 2
op mul *tmp345 *tmp344 :client:halfSize
op add :client:x *tmp343 *tmp345
op sub :client:y .forgeY :client:halfSize
jump 552 always 0 0
jump 538 greaterThanEq :client:t 2
op add :client:x .forgeX :client:halfSize
op sub *tmp351 .forgeY :client:halfSize
op sub *tmp352 :client:t 1
op mul *tmp353 *tmp352 2
op mul *tmp354 *tmp353 :client:halfSize
op add :client:y *tmp351 *tmp354
jump 552 always 0 0
jump 546 greaterThanEq :client:t 3
op add *tmp358 .forgeX :client:halfSize
op sub *tmp359 :client:t 2
op mul *tmp360 *tmp359 2
op mul *tmp361 *tmp360 :client:halfSize
op sub :client:x *tmp358 *tmp361
op add :client:y .forgeY :client:halfSize
jump 552 always 0 0
op sub :client:x .forgeX :client:halfSize
op add *tmp365 .forgeY :client:halfSize
op sub *tmp366 :client:t 3
op mul *tmp367 *tmp366 2
op mul *tmp368 *tmp367 :client:halfSize
op sub :client:y *tmp365 *tmp368
effect trail :client:x :client:y 2.5 :client:color 0
op add :client:i :client:i 1
jump 519 lessThanEq :client:i 3
set .upgradeList*rret 558
op mul *tmp500 .upgrade 2
op add @counter 780 *tmp500
set :client:name .upgradeList*r
op add *tmp372 .upgrade 1
set .upgradeList*rret 563
op mul *tmp501 *tmp372 2
op add @counter 780 *tmp501
set :client:symbol .upgradeList*r
op add *tmp375 .upgrade 2
set .upgradeList*rret 568
op mul *tmp502 *tmp375 2
op add @counter 780 *tmp502
set :client:cost .upgradeList*r
op add *tmp378 .upgrade 3
set .upgradeList*rret 573
op mul *tmp503 *tmp378 2
op add @counter 780 *tmp503
set :client:costIncrease .upgradeList*r
op add *tmp381 .upgrade 4
set .upgradeList*rret 578
op mul *tmp504 *tmp381 2
op add @counter 780 *tmp504
set :client:increaseType .upgradeList*r
op add *tmp384 .upgrade 5
set .upgradeList*rret 583
op mul *tmp505 *tmp384 2
op add @counter 780 *tmp505
set :client:level .upgradeList*r
op add *tmp387 .upgrade 6
set .upgradeList*rret 588
op mul *tmp506 *tmp387 2
op add @counter 780 *tmp506
set :client:maxLevel .upgradeList*r
op add *tmp390 .upgrade 7
set .upgradeList*rret 593
op mul *tmp507 *tmp390 2
op add @counter 780 *tmp507
set :client:buff .upgradeList*r
op add *tmp393 .interfaceX .offsetX
op sub :mapButton:centerX *tmp393 5.75
set :mapButton:centerY -3.6
set :mapButton:width 3.5
set :mapButton:height 2
set :mapButton:playerTeam .team
set :mapButton*retaddr 602
jump 112 always 0 0
set :client:color1 "[white]"
jump 605 equal :mapButton*retval 0
set :client:color1 "[blue]"
op add *tmp398 .interfaceX .offsetX
op add :mapButton:centerX *tmp398 5.75
set :mapButton:centerY -3.6
set :mapButton:width 3.5
set :mapButton:height 2
set :mapButton:playerTeam .team
set :mapButton*retaddr 613
jump 112 always 0 0
set *tmp402 "[white]"
jump 616 equal :mapButton*retval 0
set *tmp402 "[blue]"
print :client:color1
print "[  ]    [gold]{0}{0}    [  ][white]\n\n"
format :client:symbol
format *tmp402
print :client:name
jump 628 lessThan :client:buff 1
op mul *tmp405 :client:buff :client:level
op idiv *tmp407 *tmp405 0.01
op div *tmp408 *tmp407 100
print "[white]\n(+{0})"
format *tmp408
jump 646 always 0 0
op mul *tmp409 :client:buff :client:level
op mul *tmp410 *tmp409 100
op add *tmp411 *tmp410 0.5
op floor *tmp412 *tmp411 0
op div *tmp413 *tmp412 100
op add :client:value 1 *tmp413
op floor :client:intPart :client:value 0
op sub *tmp416 :client:value :client:intPart
op mul *tmp417 *tmp416 100
op add *tmp418 *tmp417 0.5
op floor :client:fracPart *tmp418 0
set *tmp421 ""
jump 642 greaterThanEq :client:fracPart 10
set *tmp421 "0"
print "[white]\n(x{0}.{0}{0})"
format :client:intPart
format *tmp421
format :client:fracPart
print "[white]\n\nLevel: [gold]"
print :client:level
jump 651 equal :client:maxLevel null
print " / "
print :client:maxLevel
jump 655 notEqual :client:increaseType "additive"
op mul *tmp426 :client:costIncrease :client:level
op add :client:costDisplay :client:cost *tmp426
jump 657 always 0 0
op pow *tmp428 :client:costIncrease :client:level
op mul :client:costDisplay :client:cost *tmp428
op equal *tmp430 :client:level :client:maxLevel
op notEqual *tmp431 :client:maxLevel 0
op land *tmp432 *tmp430 *tmp431
jump 663 equal *tmp432 false
print "\n[white]Cost: [gold]Maxed!"
jump 666 always 0 0
op ceil *tmp434 :client:costDisplay 0
print "[white]\nCost: [gold]{0} Aether"
format *tmp434
op add :mapButton:centerX .interfaceX .offsetX
set :mapButton:centerY -16.75
set :mapButton:width 3.5
set :mapButton:height 2
set :mapButton:playerTeam .team
set :mapButton*retaddr 673
jump 112 always 0 0
jump 676 equal :mapButton*retval 0
print "[blue]"
jump 677 always 0 0
print "[white]"
print "\n\n[  ]"
makemarker text .idForgeUpgrades 0 0 false
setmarker fontSize .idForgeUpgrades 3 0 0
setmarker flushText .idForgeUpgrades 0 0 0
op add *tmp439 .interfaceX .offsetX
setmarker pos .idForgeUpgrades *tmp439 -3 0
printflush :client:message1
sensor *tmp440 .forgeBlock @efficiency
op mul *tmp441 *tmp440 3
op add *tmp442 *tmp441 1
op mul *tmp443 .aetherProduction *tmp442
op idiv *tmp445 *tmp443 0.1
op div :client:aetherProductionC *tmp445 10
op floor :client:totalAetherC .totalAether 0
print "[gold]Aether \n[white]{0}\n({0}/s)[gold]\n\nHeat \n[white]{0}x Aether"
format :client:totalAetherC
format :client:aetherProductionC
sensor *tmp448 .forgeBlock @efficiency
op mul *tmp449 *tmp448 3
op add *tmp450 *tmp449 1
op idiv *tmp452 *tmp450 0.1
op div *tmp453 *tmp452 10
format *tmp453
makemarker text .idForgeAetherDisplay 0 0 false
setmarker fontSize .idForgeAetherDisplay 3 0 0
setmarker flushText .idForgeAetherDisplay 0 0 0
op sub *tmp454 .interfaceX 9
setmarker pos .idForgeAetherDisplay *tmp454 -8 0
sensor *tmp455 .forgeBlock @x
sensor *tmp456 .forgeBlock @y
sensor *tmp457 .forgeBlock @size
set :popup:idPopup .idPopup
set :popup:processorId .processorId
set :popup:x *tmp455
set :popup:y *tmp456
set :popup:size *tmp457
jump 778 notEqual .popupDismissed false
print "[orange] New Feature [white]\n\nOpen the minimap to read\n about it.\n\n"
op sub *tmp460 *tmp455 3
op add *tmp461 *tmp456 *tmp457
op sub *tmp462 *tmp461 0.5
set :playerButton:centerX *tmp460
set :playerButton:centerY *tmp462
set :playerButton:width 3.5
set :playerButton:height 1.5
set :playerButton:player @clientUnit
set :playerButton*retaddr 725
jump 143 always 0 0
set :popup:closeButton :playerButton*retval
jump 729 equal :playerButton*retval 0
print "[blue]"
jump 730 always 0 0
print "[white]"
print "[ Close ][white] / "
op add *tmp466 :popup:x 2.3
op add *tmp467 :popup:y :popup:size
op sub *tmp468 *tmp467 0.5
set :playerButton:centerX *tmp466
set :playerButton:centerY *tmp468
set :playerButton:width 4.5
set :playerButton:height 1.5
set :playerButton:player @clientUnit
set :playerButton*retaddr 741
jump 143 always 0 0
jump 744 equal :playerButton*retval 0
print "[blue]"
jump 745 always 0 0
print "[white]"
print "[ Close All ]"
jump 749 equal :playerButton*retval 0
print "[blue]"
jump 750 always 0 0
print "[white]"
op equal *tmp474 :popup:closeButton 2
op equal *tmp475 :playerButton*retval 2
op or *tmp477 *tmp474 *tmp475
jump 770 equal *tmp477 false
sensor *tmp479 @clientUnit @team
fetch buildCount *tmp481 *tmp479 0 @world-processor
set :popup:i 0
jump 770 greaterThan 0 *tmp481
sensor *tmp482 @clientUnit @team
fetch build :popup:processor *tmp482 :popup:i @world-processor
read *tmp484 :popup:processor ".processorId"
op equal *tmp485 *tmp484 :popup:processorId
op land *tmp487 *tmp485 *tmp474
jump 766 equal *tmp487 false
write 1 :popup:processor ".popupDismissed"
jump 768 always 0 0
jump 768 notEqual :playerButton*retval 2
write 1 :popup:processor ".popupDismissed"
op add :popup:i :popup:i 1
jump 758 lessThanEq :popup:i *tmp481
makemarker text :popup:idPopup 0 0 false
setmarker flushText :popup:idPopup 0 0 0
setmarker autoscale :popup:idPopup 0 0 0
setmarker fontSize :popup:idPopup 1.5 0 0
op add *tmp491 :popup:y :popup:size
op add *tmp492 *tmp491 4
setmarker pos :popup:idPopup :popup:x *tmp492 0
set @counter :client*retaddr
setmarker remove .idPopup 0 0 0
set @counter :client*retaddr
set .upgradeList*r .upgradeList*0
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*1
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*2
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*3
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*4
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*5
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*6
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*7
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*8
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*9
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*10
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*11
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*12
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*13
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*14
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*15
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*16
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*17
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*18
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*19
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*20
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*21
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*22
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*23
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*24
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*25
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*26
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*27
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*28
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*29
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*30
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*31
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*32
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*33
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*34
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*35
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*36
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*37
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*38
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*39
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*40
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*41
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*42
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*43
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*44
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*45
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*46
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*47
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*48
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*49
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*50
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*51
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*52
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*53
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*54
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*55
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*56
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*57
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*58
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*59
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*60
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*61
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*62
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*63
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*64
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*65
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*66
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*67
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*68
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*69
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*70
set @counter .upgradeList*rret
set .upgradeList*r .upgradeList*71
set @counter .upgradeList*rret
print "Compiled by Mindcode - github.com/cardillan/mindcode"

